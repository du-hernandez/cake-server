package com.altico.cakeserver.infrastructure.config;

import com.altico.cakeserver.applications.ports.input.*;
import com.altico.cakeserver.applications.ports.input.dto.*;
import com.altico.cakeserver.domain.model.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Inicializador de datos completo para desarrollo
 * Poblaci√≥n de todas las tablas y relaciones del sistema
 *
 * Arquitectura: Hexagonal
 * Framework: Spring Boot 3.5.0
 *
 * @author Duverney Hernandez Mora
 */
@Configuration
@Slf4j
public class DataInitializer {

    @Bean
    @Profile("dev") // Solo en perfil de desarrollo
    CommandLineRunner initCompleteData(
            // ============== SERVICIOS DE DOMINIO ==============
            TortaServicePort tortaService,
            OcasionServicePort ocasionService,
            ImagenServicePort imagenService,
            PermisoServicePort permisoService,
            RolServicePort rolService,
            UsuarioServicePort usuarioService,
            RefreshTokenServicePort refreshTokenService) {

        return args -> {
            log.info("üöÄ INICIANDO POBLACI√ìN COMPLETA DE BASE DE DATOS - DESARROLLO");
            log.info("üìä Sistema: Cake Server API v1.0.0");
            log.info("üèóÔ∏è  Arquitectura: Hexagonal");
            log.info("‚ö° Framework: Spring Boot 3.5.0");

            try {
                // ============== PASO 1: PERMISOS DEL SISTEMA ==============
                log.info("\nüìã PASO 1: Creando permisos del sistema...");
                crearPermisosAdicionales(permisoService);

                // ============== PASO 2: ROLES AVANZADOS ==============
                log.info("\nüë• PASO 2: Configurando roles avanzados...");
                configurarRolesAvanzados(rolService, permisoService);

                // ============== PASO 3: USUARIOS DEL SISTEMA ==============
                log.info("\nüë§ PASO 3: Creando usuarios del sistema...");
                crearUsuariosCompletos(usuarioService);

                // ============== PASO 4: OCASIONES ESPECIALES ==============
                log.info("\nüéâ PASO 4: Creando ocasiones especiales...");
                var ocasiones = crearOcasionesEspeciales(ocasionService);

                // ============== PASO 5: CAT√ÅLOGO DE TORTAS ==============
                log.info("\nüéÇ PASO 5: Creando cat√°logo completo de tortas...");
                var tortas = crearCatalogoTortas(tortaService);

                // ============== PASO 6: RELACIONES TORTAS-OCASIONES ==============
                log.info("\nüîó PASO 6: Estableciendo relaciones tortas-ocasiones...");
                establecerRelacionesTortasOcasiones(tortaService, tortas, ocasiones);

                // ============== PASO 7: GALER√çA DE IM√ÅGENES ==============
                log.info("\nüì∏ PASO 7: Creando galer√≠a de im√°genes...");
                crearGaleriaImagenes(imagenService, tortas);

                // ============== PASO 8: TOKENS DE PRUEBA ==============
                log.info("\nüîê PASO 8: Generando tokens de prueba...");
                generarTokensDePrueba(refreshTokenService);

                // ============== REPORTE FINAL ==============
                log.info("\nüìä REPORTE FINAL DE INICIALIZACI√ìN:");
                generarReporteFinal(tortaService, ocasionService, permisoService,
                        rolService, usuarioService, refreshTokenService);

                log.info("\n‚úÖ POBLACI√ìN DE BASE DE DATOS COMPLETADA EXITOSAMENTE");
                log.info("üåü Sistema listo para desarrollo y pruebas");

            } catch (Exception e) {
                log.error("‚ùå ERROR DURANTE LA INICIALIZACI√ìN: {}", e.getMessage(), e);
                throw e;
            }
        };
    }

    // ============== M√âTODOS PRIVADOS ESPECIALIZADOS ==============

    /**
     * Crear permisos adicionales espec√≠ficos del dominio
     */
    private void crearPermisosAdicionales(PermisoServicePort permisoService) {
        try {
            // Permisos avanzados de tortas
            crearPermisoSiNoExiste(permisoService, "Exportar Cat√°logo",
                    "Permite exportar el cat√°logo completo", "tortas", "export");
            crearPermisoSiNoExiste(permisoService, "Importar Tortas",
                    "Permite importar tortas masivamente", "tortas", "import");
            crearPermisoSiNoExiste(permisoService, "Publicar Torta",
                    "Permite publicar/despublicar tortas", "tortas", "publish");

            // Permisos de reportes
            crearPermisoSiNoExiste(permisoService, "Generar Reportes",
                    "Permite generar reportes del sistema", "reportes", "generate");
            crearPermisoSiNoExiste(permisoService, "Ver Analytics",
                    "Acceso a analytics y m√©tricas", "analytics", "view");

            // Permisos de configuraci√≥n
            crearPermisoSiNoExiste(permisoService, "Configurar Cache",
                    "Permite configurar y limpiar cache", "cache", "manage");
            crearPermisoSiNoExiste(permisoService, "Backup Sistema",
                    "Permite realizar backups", "backup", "create");

            log.info("   ‚úÖ Permisos adicionales creados");
        } catch (Exception e) {
            log.warn("   ‚ö†Ô∏è Error creando permisos adicionales: {}", e.getMessage());
        }
    }

    /**
     * Configurar roles avanzados con permisos espec√≠ficos
     */
    private void configurarRolesAvanzados(RolServicePort rolService, PermisoServicePort permisoService) {
        try {
            // Crear roles especializados
            crearRolSiNoExiste(rolService, "ROLE_BAKER",
                    "Pastelero - Gesti√≥n completa de tortas", 75);
            crearRolSiNoExiste(rolService, "ROLE_DESIGNER",
                    "Dise√±ador - Gesti√≥n de im√°genes y galer√≠a", 80);
            crearRolSiNoExiste(rolService, "ROLE_SALES",
                    "Ventas - Acceso a cat√°logos y ocasiones", 90);
            crearRolSiNoExiste(rolService, "ROLE_ANALYST",
                    "Analista - Acceso a reportes y estad√≠sticas", 85);

            // ROLES DEFINIDOS POR DEFECTO PARA EL SISTEMA
            crearRolSiNoExiste(rolService, "ROLE_SUPER_ADMIN", "Super Administrador con todos los permisos", 1);
            crearRolSiNoExiste(rolService, "ROLE_ADMIN", "Administrador del sistema", 10);
            crearRolSiNoExiste(rolService, "ROLE_MANAGER", "Gerente con permisos de gesti√≥n", 50);
            crearRolSiNoExiste(rolService, "ROLE_USER", "Usuario regular con permisos b√°sicos", 100);
            crearRolSiNoExiste(rolService, "ROLE_VIEWER", "Solo lectura", 500);

            // Asignar permisos espec√≠ficos a roles (ejemplo para BAKER)
            try {
                var rolBaker = rolService.obtenerPorNombre("ROLE_BAKER");
                var permisoCrearTorta = permisoService.obtenerPorRecursoYAccion("tortas", "create");
                rolService.asignarPermiso(rolBaker.getId(), permisoCrearTorta.getId());
                log.info("   ‚úÖ Permisos asignados a roles especializados");
            } catch (Exception e) {
                log.debug("   ‚ÑπÔ∏è Permisos ya asignados o rol no encontrado");
            }

        } catch (Exception e) {
            log.warn("   ‚ö†Ô∏è Error configurando roles avanzados: {}", e.getMessage());
        }
    }

    /**
     * Crear usuarios completos con diferentes roles
     */
    private void crearUsuariosCompletos(UsuarioServicePort usuarioService) {
        // Usuario Super Admin
        crearUsuarioSiNoExiste(usuarioService,
                "superadmin", "superadmin@cakeserver.com", "SuperAdmin123!",
                Set.of("ROLE_SUPER_ADMIN"), true);

        // Usuarios especializados
        crearUsuarioSiNoExiste(usuarioService,
                "baker.maria", "maria@cakeserver.com", "Baker123!",
                Set.of("ROLE_BAKER", "ROLE_USER"), true);

        crearUsuarioSiNoExiste(usuarioService,
                "designer.carlos", "carlos@cakeserver.com", "Design123!",
                Set.of("ROLE_DESIGNER", "ROLE_USER"), true);

        crearUsuarioSiNoExiste(usuarioService,
                "sales.ana", "ana@cakeserver.com", "Sales123!",
                Set.of("ROLE_SALES", "ROLE_USER"), true);

        crearUsuarioSiNoExiste(usuarioService,
                "analyst.luis", "luis@cakeserver.com", "Analyst123!",
                Set.of("ROLE_ANALYST", "ROLE_USER"), true);

        // Usuario de pruebas
        crearUsuarioSiNoExiste(usuarioService,
                "testuser", "test@cakeserver.com", "Test123!",
                Set.of("ROLE_USER"), true);

        // Usuario inactivo para pruebas
        crearUsuarioSiNoExiste(usuarioService,
                "inactive.user", "inactive@cakeserver.com", "Inactive123!",
                Set.of("ROLE_USER"), false);

        log.info("   ‚úÖ {} usuarios especializados creados", 7);
    }

    /**
     * Crear ocasiones especiales del negocio
     */
    private List<Ocasion> crearOcasionesEspeciales(OcasionServicePort ocasionService) {
        var ocasiones = List.of(
                // Ocasiones principales
                crearOcasionSiNoExiste(ocasionService, "Cumplea√±os"),
                crearOcasionSiNoExiste(ocasionService, "Boda"),
                crearOcasionSiNoExiste(ocasionService, "Aniversario"),
                crearOcasionSiNoExiste(ocasionService, "Graduaci√≥n"),
                crearOcasionSiNoExiste(ocasionService, "Baby Shower"),
                crearOcasionSiNoExiste(ocasionService, "Quincea√±era"),

                // Ocasiones estacionales
                crearOcasionSiNoExiste(ocasionService, "Navidad"),
                crearOcasionSiNoExiste(ocasionService, "A√±o Nuevo"),
                crearOcasionSiNoExiste(ocasionService, "San Valent√≠n"),
                crearOcasionSiNoExiste(ocasionService, "D√≠a de la Madre"),
                crearOcasionSiNoExiste(ocasionService, "D√≠a del Padre"),
                crearOcasionSiNoExiste(ocasionService, "Halloween"),

                // Ocasiones especiales
                crearOcasionSiNoExiste(ocasionService, "Bautizo"),
                crearOcasionSiNoExiste(ocasionService, "Primera Comuni√≥n"),
                crearOcasionSiNoExiste(ocasionService, "Confirmaci√≥n"),
                crearOcasionSiNoExiste(ocasionService, "Despedida de Soltera"),
                crearOcasionSiNoExiste(ocasionService, "Jubilaci√≥n"),
                crearOcasionSiNoExiste(ocasionService, "Inauguraci√≥n"),
                crearOcasionSiNoExiste(ocasionService, "Reuni√≥n Familiar"),
                crearOcasionSiNoExiste(ocasionService, "Celebraci√≥n Empresarial")
        );

        log.info("   ‚úÖ {} ocasiones especiales creadas", ocasiones.size());
        return ocasiones;
    }

    /**
     * Crear cat√°logo completo de tortas
     */
    private List<Torta> crearCatalogoTortas(TortaServicePort tortaService) {
        var tortas = List.of(
                // Tortas cl√°sicas
                crearTortaSiNoExiste(tortaService,
                        "Torta de Chocolate Triple", "https://images.cakeserver.com/chocolate-triple.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Red Velvet con Queso Crema", "https://images.cakeserver.com/red-velvet.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Tres Leches Tradicional", "https://images.cakeserver.com/tres-leches.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Vainilla Cl√°sica", "https://images.cakeserver.com/vainilla-clasica.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Cheesecake de Frutos Rojos", "https://images.cakeserver.com/cheesecake.jpg"),

                // Tortas de frutas
                crearTortaSiNoExiste(tortaService,
                        "Torta de Fresas con Crema", "https://images.cakeserver.com/fresas-crema.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Mango y Maracuy√°", "https://images.cakeserver.com/mango-maracuya.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Pi√±a Colada", "https://images.cakeserver.com/pina-colada.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Lim√≥n", "https://images.cakeserver.com/limon.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Durazno", "https://images.cakeserver.com/durazno.jpg"),

                // Tortas especiales
                crearTortaSiNoExiste(tortaService,
                        "Torta Selva Negra", "https://images.cakeserver.com/selva-negra.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Zanahoria", "https://images.cakeserver.com/zanahoria.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Caf√© Moka", "https://images.cakeserver.com/cafe-moka.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Coco", "https://images.cakeserver.com/coco.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Nutella", "https://images.cakeserver.com/nutella.jpg"),

                // Tortas infantiles
                crearTortaSiNoExiste(tortaService,
                        "Torta de Unicornio", "https://images.cakeserver.com/unicornio.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Superh√©roes", "https://images.cakeserver.com/superheroes.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Princesas", "https://images.cakeserver.com/princesas.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Dinosaurios", "https://images.cakeserver.com/dinosaurios.jpg"),
                crearTortaSiNoExiste(tortaService,
                        "Torta de Minecraft", "https://images.cakeserver.com/minecraft.jpg")
        );

        log.info("   ‚úÖ {} tortas creadas en el cat√°logo", tortas.size());
        return tortas;
    }

    /**
     * Establecer relaciones inteligentes entre tortas y ocasiones
     */
    private void establecerRelacionesTortasOcasiones(TortaServicePort tortaService,
                                                     List<Torta> tortas,
                                                     List<Ocasion> ocasiones) {

        // Mapeo inteligente basado en el dominio del negocio
        var relaciones = Map.of(
                "Cumplea√±os", List.of("Chocolate Triple", "Vainilla Cl√°sica", "Fresas", "Unicornio", "Superh√©roes", "Princesas"),
                "Boda", List.of("Red Velvet", "Tres Leches", "Vainilla Cl√°sica", "Fresas"),
                "Aniversario", List.of("Red Velvet", "Chocolate Triple", "Selva Negra"),
                "Baby Shower", List.of("Fresas", "Vainilla Cl√°sica", "Lim√≥n", "Coco"),
                "Quincea√±era", List.of("Red Velvet", "Tres Leches", "Princesas", "Fresas"),
                "Navidad", List.of("Chocolate Triple", "Selva Negra", "Tres Leches"),
                "San Valent√≠n", List.of("Red Velvet", "Chocolate Triple", "Fresas"),
                "Graduaci√≥n", List.of("Tres Leches", "Zanahoria", "Caf√© Moka")
        );

        int relacionesCreadas = 0;
        for (var entrada : relaciones.entrySet()) {
            var nombreOcasion = entrada.getKey();
            var tiposTorta = entrada.getValue();

            var ocasion = ocasiones.stream()
                    .filter(o -> o.getNombre().contains(nombreOcasion))
                    .findFirst();

            if (ocasion.isPresent()) {
                for (String tipoTorta : tiposTorta) {
                    var torta = tortas.stream()
                            .filter(t -> t.getDescripcion().contains(tipoTorta))
                            .findFirst();

                    if (torta.isPresent()) {
                        try {
                            tortaService.agregarOcasion(torta.get().getId(), ocasion.get().getId());
                            relacionesCreadas++;
                        } catch (Exception e) {
                            log.debug("   ‚ÑπÔ∏è Relaci√≥n ya existe: {} - {}",
                                    tipoTorta, nombreOcasion);
                        }
                    }
                }
            }
        }

        log.info("   ‚úÖ {} relaciones torta-ocasi√≥n establecidas", relacionesCreadas);
    }

    /**
     * Crear galer√≠a completa de im√°genes
     */
    private void crearGaleriaImagenes(ImagenServicePort imagenService, List<Torta> tortas) {
        int imagenesCreadas = 0;

        for (Torta torta : tortas) {
            // Crear 2-4 im√°genes adicionales por torta
            String baseName = torta.getDescripcion().toLowerCase()
                    .replaceAll("[^a-z0-9]", "-")
                    .replaceAll("-+", "-");

            var imagenes = List.of(
                    "https://images.cakeserver.com/" + baseName + "-detalle1.jpg",
                    "https://images.cakeserver.com/" + baseName + "-detalle2.jpg",
                    "https://images.cakeserver.com/" + baseName + "-proceso.jpg",
                    "https://images.cakeserver.com/" + baseName + "-decoracion.jpg"
            );

            for (String url : imagenes) {
                try {
                    if (!imagenService.existePorUrl(url)) {
                        imagenService.crear(Imagen.crear(url, torta.getId()));
                        imagenesCreadas++;
                    }
                } catch (Exception e) {
                    log.debug("   ‚ÑπÔ∏è Imagen ya existe o error: {}", url);
                }
            }
        }

        log.info("   ‚úÖ {} im√°genes adicionales creadas en la galer√≠a", imagenesCreadas);
    }

    /**
     * Generar tokens de prueba para diferentes usuarios
     */
    private void generarTokensDePrueba(RefreshTokenServicePort refreshTokenService) {
        try {
            // Simulamos tokens para diferentes dispositivos/usuarios
            var dispositivos = List.of(
                    new DispositivoSimulado("admin", "Desktop - Chrome", "192.168.1.100", "Chrome/120.0.0.0"),
                    new DispositivoSimulado("baker.maria", "Mobile - Safari", "192.168.1.101", "Safari/17.0"),
                    new DispositivoSimulado("designer.carlos", "Desktop - Firefox", "192.168.1.102", "Firefox/121.0"),
                    new DispositivoSimulado("sales.ana", "Tablet - Edge", "192.168.1.103", "Edge/120.0.0.0"),
                    new DispositivoSimulado("testuser", "Mobile - Chrome", "192.168.1.104", "Chrome Mobile/120.0")
            );

            int tokensCreados = 0;
            for (var dispositivo : dispositivos) {
                try {
                    refreshTokenService.crearToken(
                            dispositivo.username(),
                            dispositivo.deviceInfo(),
                            dispositivo.ipAddress(),
                            dispositivo.userAgent()
                    );
                    tokensCreados++;
                } catch (Exception e) {
                    log.debug("   ‚ÑπÔ∏è Error creando token para {}: {}",
                            dispositivo.username(), e.getMessage());
                }
            }

            log.info("   ‚úÖ {} tokens de prueba generados", tokensCreados);
        } catch (Exception e) {
            log.warn("   ‚ö†Ô∏è Error generando tokens de prueba: {}", e.getMessage());
        }
    }

    /**
     * Generar reporte final de inicializaci√≥n
     */
    private void generarReporteFinal(TortaServicePort tortaService,
                                     OcasionServicePort ocasionService,
                                     PermisoServicePort permisoService,
                                     RolServicePort rolService,
                                     UsuarioServicePort usuarioService,
                                     RefreshTokenServicePort refreshTokenService) {

        log.info("   üìä Total de tortas: {}", tortaService.contarTotal());
        log.info("   üéâ Ocasiones activas: {}", ocasionService.contarActivas());
        log.info("   üë• Usuarios totales: {}", usuarioService.obtenerEstadisticas().totalUsuarios());
        log.info("   üîê Roles configurados: {}", rolService.obtenerEstadisticasRoles().get("total"));
        log.info("   üìã Permisos del sistema: {}", permisoService.obtenerEstadisticasPermisos().get("total"));

        // Estad√≠sticas de tokens
        var tokenStats = refreshTokenService.obtenerEstadisticas();
        log.info("   üìä Total Tokens: {}", tokenStats.totalTokens());
        log.info("   üü¢ Tokens Activos: {}", tokenStats.tokensActivos());
        log.info("   üî¥ Tokens Expirados: {}", tokenStats.tokensExpirados());
        log.info("   üö´ Tokens Revocados: {}", tokenStats.tokensRevocados());
        log.info("   ‚è≥ Tokens Por Expirar en 24h: {}", tokenStats.tokensPorExpirar24h());
        log.info("   üë§ Sesiones √önicas: {}", tokenStats.sesionesUnicas());
        log.info("   üì± Dispositivos √önicos: {}", tokenStats.dispositivosUnicos());
        log.info("   üìà Promedio sesiones por Usuario: {}", tokenStats.promedioSesionesPorUsuario());


        // Top ocasiones m√°s populares
        List<Map<String, Object>> ocasionesPopulares = ocasionService.obtenerOcasionesMasPopulares(3);
        log.info("   üèÜ TOP 3 OCASIONES M√ÅS POPULARES:");
        ocasionesPopulares.forEach(stat -> {
            log.info("      ‚Ä¢ {}: {} tortas asociadas",
                    stat.get("nombre"), stat.get("cantidadTortas"));
        });

        // Usuarios por rol
        var usuarioStats = usuarioService.obtenerEstadisticas();
        log.info("   üë§ DISTRIBUCI√ìN DE USUARIOS POR ROL:");
        log.info("      ‚Ä¢ Usuarios totales: {}", usuarioStats.totalUsuarios());
        log.info("      ‚Ä¢ Usuarios activos: {}", usuarioStats.usuariosActivos());
        log.info("      ‚Ä¢ Usuarios inactivos: {}", usuarioStats.usuariosInactivos());
        log.info("      ‚Ä¢ Sin roles asignados: {}", usuarioStats.usuariosSinRoles());
    }

    // ============== M√âTODOS AUXILIARES ==============

    private void crearPermisoSiNoExiste(PermisoServicePort service, String nombre,
                                        String descripcion, String recurso, String accion) {
        try {
            if (!service.existePermiso(recurso, accion)) {
                service.crearPermiso(new CreatePermisoCommand(nombre, descripcion, recurso, accion));
            }
        } catch (Exception e) {
            log.debug("Permiso ya existe: {}", nombre);
        }
    }

    private void crearRolSiNoExiste(RolServicePort service, String nombre,
                                    String descripcion, int prioridad) {
        try {
            if (!service.existeRol(nombre)) {
                service.crearRol(new CreateRolCommand(nombre, descripcion, prioridad, Set.of()));
            }
        } catch (Exception e) {
            log.debug("Rol ya existe: {}", nombre);
        }
    }

    private void crearUsuarioSiNoExiste(UsuarioServicePort service, String username,
                                        String email, String password, Set<String> roles, boolean activo) {
        try {
            if (!service.existeUsername(username)) {
                log.info("No existe el Usuario: {}. A continuaci√≥n se crear√°", username);
                service.crearUsuario(new CreateUsuarioCommand(username, email, password, activo, roles));
                UsuarioCompleto usuarioCompleto = service.obtenerPorUsername(username);
                log.info("Usuario completo creado: {}", usuarioCompleto);
            }
        } catch (Exception e) {
            log.debug("Usuario ya existe: {}", username);
        }
    }

    private Ocasion crearOcasionSiNoExiste(OcasionServicePort service, String nombre) {
        try {
            if (!service.existePorNombre(nombre)) {
                return service.crear(Ocasion.crear(nombre));
            } else {
                return service.buscarPorNombre(nombre).getFirst();
            }
        } catch (Exception e) {
            log.debug("Ocasi√≥n ya existe: {}", nombre);
            return service.buscarPorNombre(nombre).getFirst();
        }
    }

    private Torta crearTortaSiNoExiste(TortaServicePort service, String descripcion, String imagen) {
        try {
            var existentes = service.buscarPorDescripcion(descripcion);
            if (existentes.isEmpty()) {
                return service.crear(Torta.crear(descripcion, imagen));
            } else {
                return existentes.getFirst();
            }
        } catch (Exception e) {
            log.debug("Torta ya existe: {}", descripcion);
            return service.buscarPorDescripcion(descripcion).getFirst();
        }
    }

    // Record auxiliar para simulaci√≥n de dispositivos
    private record DispositivoSimulado(String username, String deviceInfo,
                                       String ipAddress, String userAgent) {}
}